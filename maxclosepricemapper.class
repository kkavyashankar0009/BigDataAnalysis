import java.io.IOException;
 import java.util.Iterator;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapred.MapReduceBase;
 import org.apache.hadoop.mapred.OutputCollector;
 import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
 public class MaxClosePriceReducer extends MapReduceBase implements Reducer<Text,IntWritable,IntWritable,Text>
 {
private int max_temp=Integer.MIN_VALUE;
 private int temp=0;
     @Override
     public void reduce(Text key, Iterator<IntWritable> values,OutputCollector<IntWritable,Text> output, Reporter r) throws IOException {

         while(values.hasNext()){
        	 IntWritable i=values.next();
        	 temp=i.get();
        	 if(temp>max_temp){
        		 max_temp=temp;
        	 }
     
         }
         output.collect(new IntWritable(max_temp),key);
         
     }
 }

